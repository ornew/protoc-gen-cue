// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: foo.proto

package v1

import (
	_ "github.com/ornew/protoc-gen-cue/pkg/options"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Enum int32

const (
	Enum_ZERO Enum = 0
	Enum_ONE  Enum = 1
)

// Enum value maps for Enum.
var (
	Enum_name = map[int32]string{
		0: "ZERO",
		1: "ONE",
	}
	Enum_value = map[string]int32{
		"ZERO": 0,
		"ONE":  1,
	}
)

func (x Enum) Enum() *Enum {
	p := new(Enum)
	*p = x
	return p
}

func (x Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_foo_proto_enumTypes[0].Descriptor()
}

func (Enum) Type() protoreflect.EnumType {
	return &file_foo_proto_enumTypes[0]
}

func (x Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Enum.Descriptor instead.
func (Enum) EnumDescriptor() ([]byte, []int) {
	return file_foo_proto_rawDescGZIP(), []int{0}
}

// enum leading
// enum leading
type EnumComment int32

const (
	// enum value leading
	// enum value leading
	EnumComment_EnumComment_ZERO EnumComment = 0 // enum value traling
	// enum value leading
	// enum value leading
	EnumComment_EnumComment_ONE EnumComment = 1
)

// Enum value maps for EnumComment.
var (
	EnumComment_name = map[int32]string{
		0: "EnumComment_ZERO",
		1: "EnumComment_ONE",
	}
	EnumComment_value = map[string]int32{
		"EnumComment_ZERO": 0,
		"EnumComment_ONE":  1,
	}
)

func (x EnumComment) Enum() *EnumComment {
	p := new(EnumComment)
	*p = x
	return p
}

func (x EnumComment) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumComment) Descriptor() protoreflect.EnumDescriptor {
	return file_foo_proto_enumTypes[1].Descriptor()
}

func (EnumComment) Type() protoreflect.EnumType {
	return &file_foo_proto_enumTypes[1]
}

func (x EnumComment) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumComment.Descriptor instead.
func (EnumComment) EnumDescriptor() ([]byte, []int) {
	return file_foo_proto_rawDescGZIP(), []int{1}
}

// enum leading
// enum leading
type EnumCommentRight int32

const (
	// enum value leading
	// enum value leading
	EnumCommentRight_EnumCommentRight_ZERO EnumCommentRight = 0 // enum value traling oneline
)

// Enum value maps for EnumCommentRight.
var (
	EnumCommentRight_name = map[int32]string{
		0: "EnumCommentRight_ZERO",
	}
	EnumCommentRight_value = map[string]int32{
		"EnumCommentRight_ZERO": 0,
	}
)

func (x EnumCommentRight) Enum() *EnumCommentRight {
	p := new(EnumCommentRight)
	*p = x
	return p
}

func (x EnumCommentRight) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumCommentRight) Descriptor() protoreflect.EnumDescriptor {
	return file_foo_proto_enumTypes[2].Descriptor()
}

func (EnumCommentRight) Type() protoreflect.EnumType {
	return &file_foo_proto_enumTypes[2]
}

func (x EnumCommentRight) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumCommentRight.Descriptor instead.
func (EnumCommentRight) EnumDescriptor() ([]byte, []int) {
	return file_foo_proto_rawDescGZIP(), []int{2}
}

type MessageNested_InnerEnum int32

const (
	MessageNested_InnerEnum_ZERO MessageNested_InnerEnum = 0
	MessageNested_InnerEnum_ONE  MessageNested_InnerEnum = 1
)

// Enum value maps for MessageNested_InnerEnum.
var (
	MessageNested_InnerEnum_name = map[int32]string{
		0: "InnerEnum_ZERO",
		1: "InnerEnum_ONE",
	}
	MessageNested_InnerEnum_value = map[string]int32{
		"InnerEnum_ZERO": 0,
		"InnerEnum_ONE":  1,
	}
)

func (x MessageNested_InnerEnum) Enum() *MessageNested_InnerEnum {
	p := new(MessageNested_InnerEnum)
	*p = x
	return p
}

func (x MessageNested_InnerEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageNested_InnerEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_foo_proto_enumTypes[3].Descriptor()
}

func (MessageNested_InnerEnum) Type() protoreflect.EnumType {
	return &file_foo_proto_enumTypes[3]
}

func (x MessageNested_InnerEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageNested_InnerEnum.Descriptor instead.
func (MessageNested_InnerEnum) EnumDescriptor() ([]byte, []int) {
	return file_foo_proto_rawDescGZIP(), []int{2, 0}
}

type MessageNested_Inner_InnerEnum int32

const (
	MessageNested_Inner_Inner_InnerEnum_ZERO MessageNested_Inner_InnerEnum = 0
	MessageNested_Inner_Inner_InnerEnum_ONE  MessageNested_Inner_InnerEnum = 1
)

// Enum value maps for MessageNested_Inner_InnerEnum.
var (
	MessageNested_Inner_InnerEnum_name = map[int32]string{
		0: "Inner_InnerEnum_ZERO",
		1: "Inner_InnerEnum_ONE",
	}
	MessageNested_Inner_InnerEnum_value = map[string]int32{
		"Inner_InnerEnum_ZERO": 0,
		"Inner_InnerEnum_ONE":  1,
	}
)

func (x MessageNested_Inner_InnerEnum) Enum() *MessageNested_Inner_InnerEnum {
	p := new(MessageNested_Inner_InnerEnum)
	*p = x
	return p
}

func (x MessageNested_Inner_InnerEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageNested_Inner_InnerEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_foo_proto_enumTypes[4].Descriptor()
}

func (MessageNested_Inner_InnerEnum) Type() protoreflect.EnumType {
	return &file_foo_proto_enumTypes[4]
}

func (x MessageNested_Inner_InnerEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageNested_Inner_InnerEnum.Descriptor instead.
func (MessageNested_Inner_InnerEnum) EnumDescriptor() ([]byte, []int) {
	return file_foo_proto_rawDescGZIP(), []int{2, 0, 0}
}

type MessageNested_Inner_Inner_InnerEnum int32

const (
	MessageNested_Inner_Inner_Inner_Inner_InnerEnum_ZERO MessageNested_Inner_Inner_InnerEnum = 0
	MessageNested_Inner_Inner_Inner_Inner_InnerEnum_ONE  MessageNested_Inner_Inner_InnerEnum = 1
)

// Enum value maps for MessageNested_Inner_Inner_InnerEnum.
var (
	MessageNested_Inner_Inner_InnerEnum_name = map[int32]string{
		0: "Inner_Inner_InnerEnum_ZERO",
		1: "Inner_Inner_InnerEnum_ONE",
	}
	MessageNested_Inner_Inner_InnerEnum_value = map[string]int32{
		"Inner_Inner_InnerEnum_ZERO": 0,
		"Inner_Inner_InnerEnum_ONE":  1,
	}
)

func (x MessageNested_Inner_Inner_InnerEnum) Enum() *MessageNested_Inner_Inner_InnerEnum {
	p := new(MessageNested_Inner_Inner_InnerEnum)
	*p = x
	return p
}

func (x MessageNested_Inner_Inner_InnerEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageNested_Inner_Inner_InnerEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_foo_proto_enumTypes[5].Descriptor()
}

func (MessageNested_Inner_Inner_InnerEnum) Type() protoreflect.EnumType {
	return &file_foo_proto_enumTypes[5]
}

func (x MessageNested_Inner_Inner_InnerEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageNested_Inner_Inner_InnerEnum.Descriptor instead.
func (MessageNested_Inner_Inner_InnerEnum) EnumDescriptor() ([]byte, []int) {
	return file_foo_proto_rawDescGZIP(), []int{2, 0, 0, 0}
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_foo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_foo_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

type Basic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message                 *Message                          `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	MessageNested           *MessageNested                    `protobuf:"bytes,2,opt,name=message_nested,json=messageNested,proto3" json:"message_nested,omitempty"`
	Enum                    Enum                              `protobuf:"varint,3,opt,name=enum,proto3,enum=example.v1.Enum" json:"enum,omitempty"`
	Bool                    bool                              `protobuf:"varint,4,opt,name=bool,proto3" json:"bool,omitempty"`
	String_                 string                            `protobuf:"bytes,5,opt,name=string,proto3" json:"string,omitempty"`
	Bytes                   []byte                            `protobuf:"bytes,6,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Int32                   int32                             `protobuf:"varint,7,opt,name=int32,proto3" json:"int32,omitempty"`
	Fixed32                 uint32                            `protobuf:"fixed32,8,opt,name=fixed32,proto3" json:"fixed32,omitempty"`
	Uint32                  uint32                            `protobuf:"varint,9,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Int64                   int64                             `protobuf:"varint,10,opt,name=int64,proto3" json:"int64,omitempty"`
	Fixed64                 uint64                            `protobuf:"fixed64,11,opt,name=fixed64,proto3" json:"fixed64,omitempty"`
	Uint64                  uint64                            `protobuf:"varint,12,opt,name=uint64,proto3" json:"uint64,omitempty"`
	Float                   float32                           `protobuf:"fixed32,13,opt,name=float,proto3" json:"float,omitempty"`
	Double                  float64                           `protobuf:"fixed64,14,opt,name=double,proto3" json:"double,omitempty"`
	MapStringString         map[string]string                 `protobuf:"bytes,20,rep,name=map_string_string,json=mapStringString,proto3" json:"map_string_string,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringMessage        map[string]*Message               `protobuf:"bytes,21,rep,name=map_string_message,json=mapStringMessage,proto3" json:"map_string_message,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapKeyConvertedToString map[int32]string                  `protobuf:"bytes,22,rep,name=map_key_converted_to_string,json=mapKeyConvertedToString,proto3" json:"map_key_converted_to_string,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MapStringInt32Value     map[string]*wrapperspb.Int32Value `protobuf:"bytes,23,rep,name=map_string_int32value,json=mapStringInt32value,proto3" json:"map_string_int32value,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Strings                 []string                          `protobuf:"bytes,30,rep,name=strings,proto3" json:"strings,omitempty"`
	Messages                []*Message                        `protobuf:"bytes,31,rep,name=messages,proto3" json:"messages,omitempty"`
	// Types that are assignable to Oneof:
	//
	//	*Basic_OneofString
	//	*Basic_OneofMessage
	//	*Basic_OneofEnum
	Oneof              isBasic_Oneof `protobuf_oneof:"oneof"`
	Int32NonOptional   int32         `protobuf:"varint,51,opt,name=int32_non_optional,json=int32NonOptional,proto3" json:"int32_non_optional,omitempty"`
	Int32Optional      *int32        `protobuf:"varint,52,opt,name=int32_optional,json=int32Optional,proto3,oneof" json:"int32_optional,omitempty"`
	MessageNonOptional *Message      `protobuf:"bytes,53,opt,name=message_non_optional,json=messageNonOptional,proto3" json:"message_non_optional,omitempty"`
	MessageOptional    *Message      `protobuf:"bytes,54,opt,name=message_optional,json=messageOptional,proto3,oneof" json:"message_optional,omitempty"`
}

func (x *Basic) Reset() {
	*x = Basic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Basic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Basic) ProtoMessage() {}

func (x *Basic) ProtoReflect() protoreflect.Message {
	mi := &file_foo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Basic.ProtoReflect.Descriptor instead.
func (*Basic) Descriptor() ([]byte, []int) {
	return file_foo_proto_rawDescGZIP(), []int{1}
}

func (x *Basic) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Basic) GetMessageNested() *MessageNested {
	if x != nil {
		return x.MessageNested
	}
	return nil
}

func (x *Basic) GetEnum() Enum {
	if x != nil {
		return x.Enum
	}
	return Enum_ZERO
}

func (x *Basic) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *Basic) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *Basic) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *Basic) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *Basic) GetFixed32() uint32 {
	if x != nil {
		return x.Fixed32
	}
	return 0
}

func (x *Basic) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *Basic) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *Basic) GetFixed64() uint64 {
	if x != nil {
		return x.Fixed64
	}
	return 0
}

func (x *Basic) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *Basic) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *Basic) GetDouble() float64 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *Basic) GetMapStringString() map[string]string {
	if x != nil {
		return x.MapStringString
	}
	return nil
}

func (x *Basic) GetMapStringMessage() map[string]*Message {
	if x != nil {
		return x.MapStringMessage
	}
	return nil
}

func (x *Basic) GetMapKeyConvertedToString() map[int32]string {
	if x != nil {
		return x.MapKeyConvertedToString
	}
	return nil
}

func (x *Basic) GetMapStringInt32Value() map[string]*wrapperspb.Int32Value {
	if x != nil {
		return x.MapStringInt32Value
	}
	return nil
}

func (x *Basic) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

func (x *Basic) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

func (m *Basic) GetOneof() isBasic_Oneof {
	if m != nil {
		return m.Oneof
	}
	return nil
}

func (x *Basic) GetOneofString() string {
	if x, ok := x.GetOneof().(*Basic_OneofString); ok {
		return x.OneofString
	}
	return ""
}

func (x *Basic) GetOneofMessage() *Message {
	if x, ok := x.GetOneof().(*Basic_OneofMessage); ok {
		return x.OneofMessage
	}
	return nil
}

func (x *Basic) GetOneofEnum() Enum {
	if x, ok := x.GetOneof().(*Basic_OneofEnum); ok {
		return x.OneofEnum
	}
	return Enum_ZERO
}

func (x *Basic) GetInt32NonOptional() int32 {
	if x != nil {
		return x.Int32NonOptional
	}
	return 0
}

func (x *Basic) GetInt32Optional() int32 {
	if x != nil && x.Int32Optional != nil {
		return *x.Int32Optional
	}
	return 0
}

func (x *Basic) GetMessageNonOptional() *Message {
	if x != nil {
		return x.MessageNonOptional
	}
	return nil
}

func (x *Basic) GetMessageOptional() *Message {
	if x != nil {
		return x.MessageOptional
	}
	return nil
}

type isBasic_Oneof interface {
	isBasic_Oneof()
}

type Basic_OneofString struct {
	OneofString string `protobuf:"bytes,40,opt,name=oneof_string,json=oneofString,proto3,oneof"`
}

type Basic_OneofMessage struct {
	OneofMessage *Message `protobuf:"bytes,41,opt,name=oneof_message,json=oneofMessage,proto3,oneof"`
}

type Basic_OneofEnum struct {
	OneofEnum Enum `protobuf:"varint,42,opt,name=oneof_enum,json=oneofEnum,proto3,enum=example.v1.Enum,oneof"`
}

func (*Basic_OneofString) isBasic_Oneof() {}

func (*Basic_OneofMessage) isBasic_Oneof() {}

func (*Basic_OneofEnum) isBasic_Oneof() {}

type MessageNested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner               *MessageNested_Inner                `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
	InnerInner          *MessageNested_Inner_Inner          `protobuf:"bytes,2,opt,name=inner_inner,json=innerInner,proto3" json:"inner_inner,omitempty"`
	InnerEnum           MessageNested_InnerEnum             `protobuf:"varint,3,opt,name=inner_enum,json=innerEnum,proto3,enum=example.v1.MessageNested_InnerEnum" json:"inner_enum,omitempty"`
	InnerInnerEnum      MessageNested_Inner_InnerEnum       `protobuf:"varint,4,opt,name=inner_inner_enum,json=innerInnerEnum,proto3,enum=example.v1.MessageNested_Inner_InnerEnum" json:"inner_inner_enum,omitempty"`
	InnerInnerInnerEnum MessageNested_Inner_Inner_InnerEnum `protobuf:"varint,5,opt,name=inner_inner_inner_enum,json=innerInnerInnerEnum,proto3,enum=example.v1.MessageNested_Inner_Inner_InnerEnum" json:"inner_inner_inner_enum,omitempty"`
}

func (x *MessageNested) Reset() {
	*x = MessageNested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageNested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageNested) ProtoMessage() {}

func (x *MessageNested) ProtoReflect() protoreflect.Message {
	mi := &file_foo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageNested.ProtoReflect.Descriptor instead.
func (*MessageNested) Descriptor() ([]byte, []int) {
	return file_foo_proto_rawDescGZIP(), []int{2}
}

func (x *MessageNested) GetInner() *MessageNested_Inner {
	if x != nil {
		return x.Inner
	}
	return nil
}

func (x *MessageNested) GetInnerInner() *MessageNested_Inner_Inner {
	if x != nil {
		return x.InnerInner
	}
	return nil
}

func (x *MessageNested) GetInnerEnum() MessageNested_InnerEnum {
	if x != nil {
		return x.InnerEnum
	}
	return MessageNested_InnerEnum_ZERO
}

func (x *MessageNested) GetInnerInnerEnum() MessageNested_Inner_InnerEnum {
	if x != nil {
		return x.InnerInnerEnum
	}
	return MessageNested_Inner_Inner_InnerEnum_ZERO
}

func (x *MessageNested) GetInnerInnerInnerEnum() MessageNested_Inner_Inner_InnerEnum {
	if x != nil {
		return x.InnerInnerInnerEnum
	}
	return MessageNested_Inner_Inner_Inner_Inner_InnerEnum_ZERO
}

type WellKnownTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Any       *anypb.Any              `protobuf:"bytes,1,opt,name=any,proto3" json:"any,omitempty"`
	Struct    *structpb.Struct        `protobuf:"bytes,2,opt,name=struct,proto3" json:"struct,omitempty"`
	Value     *structpb.Value         `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
	List      *structpb.ListValue     `protobuf:"bytes,4,opt,name=list,proto3" json:"list,omitempty"`
	Null      structpb.NullValue      `protobuf:"varint,5,opt,name=null,proto3,enum=google.protobuf.NullValue" json:"null,omitempty"`
	Bool      *wrapperspb.BoolValue   `protobuf:"bytes,6,opt,name=bool,proto3" json:"bool,omitempty"`
	String_   *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=string,proto3" json:"string,omitempty"`
	Bytes     *wrapperspb.BytesValue  `protobuf:"bytes,8,opt,name=bytes,proto3" json:"bytes,omitempty"`
	Int32     *wrapperspb.Int32Value  `protobuf:"bytes,9,opt,name=int32,proto3" json:"int32,omitempty"`
	Int64     *wrapperspb.Int64Value  `protobuf:"bytes,10,opt,name=int64,proto3" json:"int64,omitempty"`
	Uint32    *wrapperspb.UInt32Value `protobuf:"bytes,11,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Uint64    *wrapperspb.UInt64Value `protobuf:"bytes,12,opt,name=uint64,proto3" json:"uint64,omitempty"`
	Float     *wrapperspb.FloatValue  `protobuf:"bytes,13,opt,name=float,proto3" json:"float,omitempty"`
	Double    *wrapperspb.DoubleValue `protobuf:"bytes,14,opt,name=double,proto3" json:"double,omitempty"`
	Empty     *emptypb.Empty          `protobuf:"bytes,15,opt,name=empty,proto3" json:"empty,omitempty"`
	Timestamp *timestamppb.Timestamp  `protobuf:"bytes,16,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Duration  *durationpb.Duration    `protobuf:"bytes,17,opt,name=duration,proto3" json:"duration,omitempty"`
	FieldMask *fieldmaskpb.FieldMask  `protobuf:"bytes,18,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
}

func (x *WellKnownTypes) Reset() {
	*x = WellKnownTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WellKnownTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WellKnownTypes) ProtoMessage() {}

func (x *WellKnownTypes) ProtoReflect() protoreflect.Message {
	mi := &file_foo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WellKnownTypes.ProtoReflect.Descriptor instead.
func (*WellKnownTypes) Descriptor() ([]byte, []int) {
	return file_foo_proto_rawDescGZIP(), []int{3}
}

func (x *WellKnownTypes) GetAny() *anypb.Any {
	if x != nil {
		return x.Any
	}
	return nil
}

func (x *WellKnownTypes) GetStruct() *structpb.Struct {
	if x != nil {
		return x.Struct
	}
	return nil
}

func (x *WellKnownTypes) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *WellKnownTypes) GetList() *structpb.ListValue {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *WellKnownTypes) GetNull() structpb.NullValue {
	if x != nil {
		return x.Null
	}
	return structpb.NullValue(0)
}

func (x *WellKnownTypes) GetBool() *wrapperspb.BoolValue {
	if x != nil {
		return x.Bool
	}
	return nil
}

func (x *WellKnownTypes) GetString_() *wrapperspb.StringValue {
	if x != nil {
		return x.String_
	}
	return nil
}

func (x *WellKnownTypes) GetBytes() *wrapperspb.BytesValue {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *WellKnownTypes) GetInt32() *wrapperspb.Int32Value {
	if x != nil {
		return x.Int32
	}
	return nil
}

func (x *WellKnownTypes) GetInt64() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int64
	}
	return nil
}

func (x *WellKnownTypes) GetUint32() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Uint32
	}
	return nil
}

func (x *WellKnownTypes) GetUint64() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Uint64
	}
	return nil
}

func (x *WellKnownTypes) GetFloat() *wrapperspb.FloatValue {
	if x != nil {
		return x.Float
	}
	return nil
}

func (x *WellKnownTypes) GetDouble() *wrapperspb.DoubleValue {
	if x != nil {
		return x.Double
	}
	return nil
}

func (x *WellKnownTypes) GetEmpty() *emptypb.Empty {
	if x != nil {
		return x.Empty
	}
	return nil
}

func (x *WellKnownTypes) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *WellKnownTypes) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *WellKnownTypes) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

type FieldOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Age           int32  `protobuf:"varint,2,opt,name=age,proto3" json:"age,omitempty"`
	AgeOfNextYear int32  `protobuf:"varint,3,opt,name=age_of_next_year,json=ageOfNextYear,proto3" json:"age_of_next_year,omitempty"`
}

func (x *FieldOptions) Reset() {
	*x = FieldOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldOptions) ProtoMessage() {}

func (x *FieldOptions) ProtoReflect() protoreflect.Message {
	mi := &file_foo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldOptions.ProtoReflect.Descriptor instead.
func (*FieldOptions) Descriptor() ([]byte, []int) {
	return file_foo_proto_rawDescGZIP(), []int{4}
}

func (x *FieldOptions) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FieldOptions) GetAge() int32 {
	if x != nil {
		return x.Age
	}
	return 0
}

func (x *FieldOptions) GetAgeOfNextYear() int32 {
	if x != nil {
		return x.AgeOfNextYear
	}
	return 0
}

// message leading
// message leading
type MessageComment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// message leading
	// message leading
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MessageComment) Reset() {
	*x = MessageComment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageComment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageComment) ProtoMessage() {}

func (x *MessageComment) ProtoReflect() protoreflect.Message {
	mi := &file_foo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageComment.ProtoReflect.Descriptor instead.
func (*MessageComment) Descriptor() ([]byte, []int) {
	return file_foo_proto_rawDescGZIP(), []int{5}
}

func (x *MessageComment) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// message leading
// message leading
type MessageCommentRight struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// message leading
	// message leading
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"` // message field trailing
}

func (x *MessageCommentRight) Reset() {
	*x = MessageCommentRight{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageCommentRight) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageCommentRight) ProtoMessage() {}

func (x *MessageCommentRight) ProtoReflect() protoreflect.Message {
	mi := &file_foo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageCommentRight.ProtoReflect.Descriptor instead.
func (*MessageCommentRight) Descriptor() ([]byte, []int) {
	return file_foo_proto_rawDescGZIP(), []int{6}
}

func (x *MessageCommentRight) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type MessageNested_Inner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InnerEnum      MessageNested_Inner_InnerEnum       `protobuf:"varint,1,opt,name=inner_enum,json=innerEnum,proto3,enum=example.v1.MessageNested_Inner_InnerEnum" json:"inner_enum,omitempty"`
	InnerInnerEnum MessageNested_Inner_Inner_InnerEnum `protobuf:"varint,2,opt,name=inner_inner_enum,json=innerInnerEnum,proto3,enum=example.v1.MessageNested_Inner_Inner_InnerEnum" json:"inner_inner_enum,omitempty"`
}

func (x *MessageNested_Inner) Reset() {
	*x = MessageNested_Inner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foo_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageNested_Inner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageNested_Inner) ProtoMessage() {}

func (x *MessageNested_Inner) ProtoReflect() protoreflect.Message {
	mi := &file_foo_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageNested_Inner.ProtoReflect.Descriptor instead.
func (*MessageNested_Inner) Descriptor() ([]byte, []int) {
	return file_foo_proto_rawDescGZIP(), []int{2, 0}
}

func (x *MessageNested_Inner) GetInnerEnum() MessageNested_Inner_InnerEnum {
	if x != nil {
		return x.InnerEnum
	}
	return MessageNested_Inner_Inner_InnerEnum_ZERO
}

func (x *MessageNested_Inner) GetInnerInnerEnum() MessageNested_Inner_Inner_InnerEnum {
	if x != nil {
		return x.InnerInnerEnum
	}
	return MessageNested_Inner_Inner_Inner_Inner_InnerEnum_ZERO
}

type MessageNested_Inner_Inner struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enum MessageNested_Inner_Inner_InnerEnum `protobuf:"varint,1,opt,name=enum,proto3,enum=example.v1.MessageNested_Inner_Inner_InnerEnum" json:"enum,omitempty"`
}

func (x *MessageNested_Inner_Inner) Reset() {
	*x = MessageNested_Inner_Inner{}
	if protoimpl.UnsafeEnabled {
		mi := &file_foo_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageNested_Inner_Inner) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageNested_Inner_Inner) ProtoMessage() {}

func (x *MessageNested_Inner_Inner) ProtoReflect() protoreflect.Message {
	mi := &file_foo_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageNested_Inner_Inner.ProtoReflect.Descriptor instead.
func (*MessageNested_Inner_Inner) Descriptor() ([]byte, []int) {
	return file_foo_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *MessageNested_Inner_Inner) GetEnum() MessageNested_Inner_Inner_InnerEnum {
	if x != nil {
		return x.Enum
	}
	return MessageNested_Inner_Inner_Inner_Inner_InnerEnum_ZERO
}

var File_foo_proto protoreflect.FileDescriptor

var file_foo_proto_rawDesc = []byte{
	0x0a, 0x09, 0x66, 0x6f, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x09, 0x63, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1f, 0x0a, 0x07, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0xdc, 0x0c, 0x0a,
	0x05, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x2d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6f,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a,
	0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x14, 0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x52, 0x0a,
	0x11, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x4d, 0x61, 0x70, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x55, 0x0a, 0x12, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x6c, 0x0a, 0x1b, 0x6d, 0x61, 0x70, 0x5f,
	0x6b, 0x65, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x6f,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x2e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64,
	0x54, 0x6f, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x17, 0x6d,
	0x61, 0x70, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x54, 0x6f,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x5e, 0x0a, 0x15, 0x6d, 0x61, 0x70, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x13, 0x6d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x2f, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x73, 0x12, 0x23, 0x0a, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x0d, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x31, 0x0a, 0x0a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x6e, 0x65, 0x6f,
	0x66, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6e,
	0x6f, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x33, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x10, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x4e, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x34, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0d, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x45, 0x0a, 0x14, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x12, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x6f, 0x6e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x10, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x48, 0x02, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x1a, 0x42, 0x0a, 0x14, 0x4d,
	0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a,
	0x58, 0x0a, 0x15, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4a, 0x0a, 0x1c, 0x4d, 0x61, 0x70,
	0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x63, 0x0a, 0x18, 0x4d, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x31, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0xcb, 0x06, 0x0a, 0x0d,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a,
	0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x05, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x46, 0x0a, 0x0b, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x52, 0x0a, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0a,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x6e, 0x65,
	0x72, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x53, 0x0a, 0x10, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x65, 0x6e, 0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x6e, 0x65,
	0x72, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0e, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x6e, 0x65,
	0x72, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x64, 0x0a, 0x16, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x13, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x1a, 0x87, 0x03, 0x0a, 0x05,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x48, 0x0a, 0x0a, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x59, 0x0a, 0x10, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x65,
	0x6e, 0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0e, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x1a, 0x98, 0x01, 0x0a, 0x05, 0x49,
	0x6e, 0x6e, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x2e, 0x49, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x22, 0x4a, 0x0a, 0x09, 0x49, 0x6e, 0x6e,
	0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x1a, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x5f,
	0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x5f,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x5f,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x22, 0x3e, 0x0a, 0x09, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x6e, 0x65,
	0x72, 0x45, 0x6e, 0x75, 0x6d, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x5f,
	0x4f, 0x4e, 0x45, 0x10, 0x01, 0x22, 0x32, 0x0a, 0x09, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e,
	0x75, 0x6d, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x75, 0x6d, 0x5f,
	0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x45,
	0x6e, 0x75, 0x6d, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x22, 0xa5, 0x07, 0x0a, 0x0e, 0x57, 0x65,
	0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x26, 0x0a, 0x03,
	0x61, 0x6e, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52,
	0x03, 0x61, 0x6e, 0x79, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x06, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x6e, 0x75, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e,
	0x75, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x62,
	0x6f, 0x6f, 0x6c, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x31, 0x0a, 0x05,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x31, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x34, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x34, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x31,
	0x0a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x34, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12,
	0x35, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x6d, 0x61, 0x73, 0x6b, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x22, 0x83, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x1f, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0xda, 0xd3, 0x70, 0x07, 0x0a, 0x05, 0x21, 0x3d, 0x22, 0x78, 0x22, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x03, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x0a, 0xda, 0xd3, 0x70, 0x06, 0x0a, 0x04, 0x3c, 0x31, 0x35, 0x30, 0x52, 0x03, 0x61, 0x67,
	0x65, 0x12, 0x34, 0x0a, 0x10, 0x61, 0x67, 0x65, 0x5f, 0x6f, 0x66, 0x5f, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0b, 0xda, 0xd3, 0x70,
	0x07, 0x0a, 0x05, 0x61, 0x67, 0x65, 0x2b, 0x31, 0x52, 0x0d, 0x61, 0x67, 0x65, 0x4f, 0x66, 0x4e,
	0x65, 0x78, 0x74, 0x59, 0x65, 0x61, 0x72, 0x22, 0x24, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x29, 0x0a,
	0x13, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x2a, 0x19, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x08, 0x0a, 0x04, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4f, 0x4e,
	0x45, 0x10, 0x01, 0x2a, 0x38, 0x0a, 0x0b, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x6e, 0x75, 0x6d,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x4f, 0x4e, 0x45, 0x10, 0x01, 0x2a, 0x2d, 0x0a,
	0x10, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x12, 0x19, 0x0a, 0x15, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x5a, 0x45, 0x52, 0x4f, 0x10, 0x00, 0x42, 0x30, 0x5a, 0x2e,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x72, 0x6e, 0x65, 0x77,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x63, 0x75, 0x65, 0x2f,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x3b, 0x76, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_foo_proto_rawDescOnce sync.Once
	file_foo_proto_rawDescData = file_foo_proto_rawDesc
)

func file_foo_proto_rawDescGZIP() []byte {
	file_foo_proto_rawDescOnce.Do(func() {
		file_foo_proto_rawDescData = protoimpl.X.CompressGZIP(file_foo_proto_rawDescData)
	})
	return file_foo_proto_rawDescData
}

var file_foo_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_foo_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_foo_proto_goTypes = []interface{}{
	(Enum)(0),                                // 0: example.v1.Enum
	(EnumComment)(0),                         // 1: example.v1.EnumComment
	(EnumCommentRight)(0),                    // 2: example.v1.EnumCommentRight
	(MessageNested_InnerEnum)(0),             // 3: example.v1.MessageNested.InnerEnum
	(MessageNested_Inner_InnerEnum)(0),       // 4: example.v1.MessageNested.Inner.InnerEnum
	(MessageNested_Inner_Inner_InnerEnum)(0), // 5: example.v1.MessageNested.Inner.Inner.InnerEnum
	(*Message)(nil),                          // 6: example.v1.Message
	(*Basic)(nil),                            // 7: example.v1.Basic
	(*MessageNested)(nil),                    // 8: example.v1.MessageNested
	(*WellKnownTypes)(nil),                   // 9: example.v1.WellKnownTypes
	(*FieldOptions)(nil),                     // 10: example.v1.FieldOptions
	(*MessageComment)(nil),                   // 11: example.v1.MessageComment
	(*MessageCommentRight)(nil),              // 12: example.v1.MessageCommentRight
	nil,                                      // 13: example.v1.Basic.MapStringStringEntry
	nil,                                      // 14: example.v1.Basic.MapStringMessageEntry
	nil,                                      // 15: example.v1.Basic.MapKeyConvertedToStringEntry
	nil,                                      // 16: example.v1.Basic.MapStringInt32valueEntry
	(*MessageNested_Inner)(nil),              // 17: example.v1.MessageNested.Inner
	(*MessageNested_Inner_Inner)(nil),        // 18: example.v1.MessageNested.Inner.Inner
	(*anypb.Any)(nil),                        // 19: google.protobuf.Any
	(*structpb.Struct)(nil),                  // 20: google.protobuf.Struct
	(*structpb.Value)(nil),                   // 21: google.protobuf.Value
	(*structpb.ListValue)(nil),               // 22: google.protobuf.ListValue
	(structpb.NullValue)(0),                  // 23: google.protobuf.NullValue
	(*wrapperspb.BoolValue)(nil),             // 24: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil),           // 25: google.protobuf.StringValue
	(*wrapperspb.BytesValue)(nil),            // 26: google.protobuf.BytesValue
	(*wrapperspb.Int32Value)(nil),            // 27: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),            // 28: google.protobuf.Int64Value
	(*wrapperspb.UInt32Value)(nil),           // 29: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil),           // 30: google.protobuf.UInt64Value
	(*wrapperspb.FloatValue)(nil),            // 31: google.protobuf.FloatValue
	(*wrapperspb.DoubleValue)(nil),           // 32: google.protobuf.DoubleValue
	(*emptypb.Empty)(nil),                    // 33: google.protobuf.Empty
	(*timestamppb.Timestamp)(nil),            // 34: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),              // 35: google.protobuf.Duration
	(*fieldmaskpb.FieldMask)(nil),            // 36: google.protobuf.FieldMask
}
var file_foo_proto_depIdxs = []int32{
	6,  // 0: example.v1.Basic.message:type_name -> example.v1.Message
	8,  // 1: example.v1.Basic.message_nested:type_name -> example.v1.MessageNested
	0,  // 2: example.v1.Basic.enum:type_name -> example.v1.Enum
	13, // 3: example.v1.Basic.map_string_string:type_name -> example.v1.Basic.MapStringStringEntry
	14, // 4: example.v1.Basic.map_string_message:type_name -> example.v1.Basic.MapStringMessageEntry
	15, // 5: example.v1.Basic.map_key_converted_to_string:type_name -> example.v1.Basic.MapKeyConvertedToStringEntry
	16, // 6: example.v1.Basic.map_string_int32value:type_name -> example.v1.Basic.MapStringInt32valueEntry
	6,  // 7: example.v1.Basic.messages:type_name -> example.v1.Message
	6,  // 8: example.v1.Basic.oneof_message:type_name -> example.v1.Message
	0,  // 9: example.v1.Basic.oneof_enum:type_name -> example.v1.Enum
	6,  // 10: example.v1.Basic.message_non_optional:type_name -> example.v1.Message
	6,  // 11: example.v1.Basic.message_optional:type_name -> example.v1.Message
	17, // 12: example.v1.MessageNested.inner:type_name -> example.v1.MessageNested.Inner
	18, // 13: example.v1.MessageNested.inner_inner:type_name -> example.v1.MessageNested.Inner.Inner
	3,  // 14: example.v1.MessageNested.inner_enum:type_name -> example.v1.MessageNested.InnerEnum
	4,  // 15: example.v1.MessageNested.inner_inner_enum:type_name -> example.v1.MessageNested.Inner.InnerEnum
	5,  // 16: example.v1.MessageNested.inner_inner_inner_enum:type_name -> example.v1.MessageNested.Inner.Inner.InnerEnum
	19, // 17: example.v1.WellKnownTypes.any:type_name -> google.protobuf.Any
	20, // 18: example.v1.WellKnownTypes.struct:type_name -> google.protobuf.Struct
	21, // 19: example.v1.WellKnownTypes.value:type_name -> google.protobuf.Value
	22, // 20: example.v1.WellKnownTypes.list:type_name -> google.protobuf.ListValue
	23, // 21: example.v1.WellKnownTypes.null:type_name -> google.protobuf.NullValue
	24, // 22: example.v1.WellKnownTypes.bool:type_name -> google.protobuf.BoolValue
	25, // 23: example.v1.WellKnownTypes.string:type_name -> google.protobuf.StringValue
	26, // 24: example.v1.WellKnownTypes.bytes:type_name -> google.protobuf.BytesValue
	27, // 25: example.v1.WellKnownTypes.int32:type_name -> google.protobuf.Int32Value
	28, // 26: example.v1.WellKnownTypes.int64:type_name -> google.protobuf.Int64Value
	29, // 27: example.v1.WellKnownTypes.uint32:type_name -> google.protobuf.UInt32Value
	30, // 28: example.v1.WellKnownTypes.uint64:type_name -> google.protobuf.UInt64Value
	31, // 29: example.v1.WellKnownTypes.float:type_name -> google.protobuf.FloatValue
	32, // 30: example.v1.WellKnownTypes.double:type_name -> google.protobuf.DoubleValue
	33, // 31: example.v1.WellKnownTypes.empty:type_name -> google.protobuf.Empty
	34, // 32: example.v1.WellKnownTypes.timestamp:type_name -> google.protobuf.Timestamp
	35, // 33: example.v1.WellKnownTypes.duration:type_name -> google.protobuf.Duration
	36, // 34: example.v1.WellKnownTypes.field_mask:type_name -> google.protobuf.FieldMask
	6,  // 35: example.v1.Basic.MapStringMessageEntry.value:type_name -> example.v1.Message
	27, // 36: example.v1.Basic.MapStringInt32valueEntry.value:type_name -> google.protobuf.Int32Value
	4,  // 37: example.v1.MessageNested.Inner.inner_enum:type_name -> example.v1.MessageNested.Inner.InnerEnum
	5,  // 38: example.v1.MessageNested.Inner.inner_inner_enum:type_name -> example.v1.MessageNested.Inner.Inner.InnerEnum
	5,  // 39: example.v1.MessageNested.Inner.Inner.enum:type_name -> example.v1.MessageNested.Inner.Inner.InnerEnum
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_foo_proto_init() }
func file_foo_proto_init() {
	if File_foo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_foo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Basic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageNested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WellKnownTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageComment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageCommentRight); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foo_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageNested_Inner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_foo_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageNested_Inner_Inner); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_foo_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Basic_OneofString)(nil),
		(*Basic_OneofMessage)(nil),
		(*Basic_OneofEnum)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_foo_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_foo_proto_goTypes,
		DependencyIndexes: file_foo_proto_depIdxs,
		EnumInfos:         file_foo_proto_enumTypes,
		MessageInfos:      file_foo_proto_msgTypes,
	}.Build()
	File_foo_proto = out.File
	file_foo_proto_rawDesc = nil
	file_foo_proto_goTypes = nil
	file_foo_proto_depIdxs = nil
}
