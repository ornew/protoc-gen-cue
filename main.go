package main

import (
	"flag"
	"fmt"
	"os"
	"path"
	"strings"

	"cuelang.org/go/cue/ast"
	cueformat "cuelang.org/go/cue/format"
	cueprotobuf "cuelang.org/go/encoding/protobuf"
	"google.golang.org/protobuf/compiler/protogen"
)

var version = "(unknown)"

func main() {
	var flags flag.FlagSet
	root := flags.String("root", ".", "")
	module := flags.String("module", ".", "")
	imports := flags.String("imports", ".", "")
	enumMode := flags.String("enum_mode", "json", "")
	protogen.Options{
		ParamFunc: flags.Set,
	}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if f.Generate {
				base := "proto"
				node, err := cueprotobuf.Extract(path.Join(base, *f.Proto.Name), nil, &cueprotobuf.Config{
					Root:     *root,
					Module:   *module,
					Paths:    strings.Split(*imports, ";"),
					PkgName:  string(f.GoPackageName),
					EnumMode: *enumMode,
				})
				if err != nil {
					return fmt.Errorf("extract: %w", err)
				}
				protocVersion := "(unknown)"
				if v := gen.Request.GetCompilerVersion(); v != nil {
					protocVersion = fmt.Sprintf("v%v.%v.%v", v.GetMajor(), v.GetMinor(), v.GetPatch())
					if s := v.GetSuffix(); s != "" {
						protocVersion += "-" + s
					}
				}
				filename := f.GeneratedFilenamePrefix + "_gen.cue"
				node.AddComment(&ast.CommentGroup{
					Doc:      true,
					Position: 0,
					List: []*ast.Comment{
						{Text: "// Code generated by protoc-gen-cue. DO NOT EDIT."},
						{Text: "// Versions:"},
						{Text: "//     protoc-gen-cue: " + protocVersion},
						{Text: "//     protoc:         " + version},
						{Text: "// Source: " + *f.Proto.Name},
					},
				})
				b, err := cueformat.Node(node)
				if err != nil {
					return fmt.Errorf("format: %w", err)
				}
				fmt.Fprintf(os.Stderr, "filename: %s\n", filename)
				o := gen.NewGeneratedFile(filename, f.GoImportPath)
				_, err = o.Write(b)
				if err != nil {
					return fmt.Errorf("write: %w", err)
				}
			}
		}
		return nil
	})
}
